<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.quartzscheduler.org/ns/quartz"
            xmlns:quartz="http://www.quartzscheduler.org/ns/quartz"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="qualified"
            version="1.1">
  <xsd:annotation>
    <xsd:documentation>
      $Id: job_scheduling_data_1_1.xsd,v 1.7 2004/05/27 15:50:33 bonhamcm Exp $
    </xsd:documentation>
  </xsd:annotation>
  
  <xsd:annotation>
    <xsd:documentation>
      
      Copyright Third Eye Consulting, Inc. (c) 2004
      
      All rights reserved.
       
      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met: 1.
      Redistributions of source code must retain the above copyright notice, this
      list of conditions and the following disclaimer. 2. Redistributions in
      binary form must reproduce the above copyright notice, this list of
      conditions and the following disclaimer in the documentation and/or other
      materials provided with the distribution.
      
      THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
      EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
      WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
      DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
      DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
      (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
      LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
      ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
      THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      
    </xsd:documentation>
  </xsd:annotation>
  
  <xsd:annotation>
    <xsd:documentation>
      <![CDATA[
        This is the XML Schema for Job Scheduling Data.
        All xml files containing job scheduling data must indicate the
        Quartz schema by using the Quartz namespace:
        
        http://www.quartzscheduler.org/ns/quartz
  
        and indicate the version of the schema by
        using the version element as shown below:

            <quartz xmlns="http://www.quartzscheduler.org/ns/quartz"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://www.quartzscheduler.org/ns/quartz
                      http://www.quartzscheduler.org/ns/quartz/job_scheduling_data_1_1.xsd"
                    version="1.1">
              ...
            </quartz>

        The instance documents may indicate the published version of
        the schema using the xsi:schemaLocation attribute for the Quartz
        namespace with the following location:

        http://www.quartzscheduler.org/ns/quartz/job_scheduling_data_1_1.xsd
      ]]>
    </xsd:documentation>
  </xsd:annotation>
  
  <xsd:element name="quartz">
    <xsd:annotation>
      <xsd:documentation>Root level node</xsd:documentation>
    </xsd:annotation>
    <xsd:complexType>
      <xsd:sequence>
        <xsd:element name="calendar" minOccurs="0" maxOccurs="unbounded" type="quartz:calendarType"/>
        <xsd:element name="job" minOccurs="0" maxOccurs="unbounded" type="quartz:jobType"/>
      </xsd:sequence>
      <xsd:attribute name="version" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation>Version of the XML Schema instance</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
      <xsd:attribute name="overwrite-existing-jobs" type="xsd:boolean" default="true">
        <xsd:annotation>
          <xsd:documentation>Whether the existing jobs will be overwritten.</xsd:documentation>
        </xsd:annotation>
      </xsd:attribute>
    </xsd:complexType>
  </xsd:element>
  
  <xsd:complexType name="calendarType">
    <xsd:annotation>
      <xsd:documentation>Define a Calendar</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="name" type="xsd:string"/>
      <xsd:element minOccurs="0" name="description" type="xsd:string"/>
      <xsd:element minOccurs="0" name="base-calendar" type="quartz:calendarType"/>
    </xsd:sequence>
    <xsd:attribute name="class-name" type="xsd:string" use="required">
      <xsd:annotation>
        <xsd:documentation>Calendar class name</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="replace" type="xsd:boolean" default="false">
      <xsd:annotation>
        <xsd:documentation>Flag to replace existing calendar</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>    
  </xsd:complexType>

  <xsd:complexType name="jobType">
    <xsd:annotation>
      <xsd:documentation>Define a Job</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="job-detail" type="quartz:job-detailType"/>
      <xsd:element name="trigger" minOccurs="0" maxOccurs="unbounded" type="quartz:triggerType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="job-detailType">
    <xsd:annotation>
      <xsd:documentation>Define a JobDetail</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="quartz:name"/>
      <xsd:element ref="quartz:group"/>
      <xsd:element ref="quartz:job-class"/>
      <xsd:sequence minOccurs="0">
        <xsd:element ref="quartz:volatility"/>
        <xsd:element ref="quartz:durability"/>
        <xsd:element ref="quartz:recover"/>
      </xsd:sequence>
      <xsd:element name="job-data-map" minOccurs="0" type="quartz:job-data-mapType"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="name" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>Name of the JobDetail or Trigger</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="group" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>Group in which the JobDetail or Trigger resides</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="job-class" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>Fully qualified name of the Job class</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
  
  <xsd:element name="volatility" type="xsd:boolean" default="false">
    <xsd:annotation>
      <xsd:documentation>Whether the Job is volatile</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="durability" type="xsd:boolean" default="false">
    <xsd:annotation>
      <xsd:documentation>Whether the Job is durable</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="recover" type="xsd:boolean" default="false">
    <xsd:annotation>
      <xsd:documentation>Whether the Job is recoverable</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:complexType name="job-data-mapType">
    <xsd:annotation>
      <xsd:documentation>Define a JobDataMap</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="entry" type="quartz:entryType"/>
    </xsd:sequence>
    <xsd:attribute name="allows-transient-data" type="xsd:boolean" default="false">
      <xsd:annotation>
        <xsd:documentation>Whether the JobDataMap allows transient data.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  
  <xsd:complexType name="entryType">
    <xsd:annotation>
      <xsd:documentation>Define a JobDataMap entry</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="quartz:key"/>
      <xsd:element ref="quartz:value"/>
    </xsd:sequence>
  </xsd:complexType>

  <xsd:element name="key" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>Define a JobDataMap key</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="value" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>Define a JobDataMap value</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:complexType name="triggerType">
    <xsd:annotation>
      <xsd:documentation>Define a Trigger</xsd:documentation>
    </xsd:annotation>
    <xsd:choice>
      <xsd:element name="simple" type="quartz:simpleType"/>
      <xsd:element name="cron" type="quartz:cronType"/>
    </xsd:choice>
  </xsd:complexType>
  
  <xsd:complexType name="abstractTriggerType" abstract="true">
    <xsd:annotation>
      <xsd:documentation>Common Trigger definitions</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="quartz:name"/>
      <xsd:element ref="quartz:group"/>
      <xsd:element minOccurs="0" name="misfire-instruction" type="quartz:misfire-instructionType"/>
      <xsd:element minOccurs="0" ref="quartz:calendar-name"/>
    </xsd:sequence>
  </xsd:complexType>
  
  <xsd:simpleType name="misfire-instructionType">
    <xsd:annotation>
      <xsd:documentation>Define a Trigger Misfire Instruction</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="MISFIRE_INSTRUCTION_SMART_POLICY"/>
      <xsd:pattern value="MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_EXISTING_COUNT"/>
      <xsd:pattern value="MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT"/>
      <xsd:pattern value="MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_EXISTING_REPEAT_COUNT"/>
      <xsd:pattern value="MISFIRE_INSTRUCTION_RESCHEDULE_NOW_WITH_REMAINING_REPEAT_COUNT"/>
      <xsd:pattern value="MISFIRE_INSTRUCTION_DO_NOTHING"/>
      <xsd:pattern value="MISFIRE_INSTRUCTION_FIRE_ONCE_NOW"/>
    </xsd:restriction>
  </xsd:simpleType>
  
  <xsd:element name="calendar-name" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>Define a Trigger Calendar name</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:complexType name="simpleType">
    <xsd:annotation>
      <xsd:documentation>Define a SimpleTrigger</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="quartz:abstractTriggerType">
        <xsd:sequence>
          <xsd:sequence minOccurs="0">
            <xsd:element ref="quartz:job-name"/>
            <xsd:element ref="quartz:job-group"/>
          </xsd:sequence>
          <xsd:sequence minOccurs="0">
            <xsd:element ref="quartz:start-time"/>
            <xsd:element minOccurs="0" ref="quartz:end-time"/>
          </xsd:sequence>
          <xsd:sequence minOccurs="0">
            <xsd:element name="repeat-count" type="quartz:repeat-countType"/>
            <xsd:element ref="quartz:repeat-interval"/>
          </xsd:sequence>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:element name="job-name" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>Name of the Job</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="job-group" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>Group in which the Job resides</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="start-time" type="xsd:dateTime">
    <xsd:annotation>
      <xsd:documentation>Start time of the job</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:element name="end-time" type="xsd:dateTime">
    <xsd:annotation>
      <xsd:documentation>End time of the job</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:simpleType name="repeat-countType">
    <xsd:annotation>
      <xsd:documentation>Number of times to repeat the Trigger (-1 for indefinite)</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:integer">
      <xsd:minInclusive value="-1"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:element name="repeat-interval" type="xsd:nonNegativeInteger">
    <xsd:annotation>
      <xsd:documentation>Time interval (in milliseconds) at which the Trigger should repeat</xsd:documentation>
    </xsd:annotation>
  </xsd:element>

  <xsd:complexType name="cronType">
    <xsd:annotation>
      <xsd:documentation>Define a CronTrigger</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="quartz:abstractTriggerType">
        <xsd:sequence minOccurs="0">
          <xsd:sequence>
            <xsd:element ref="quartz:job-name"/>
            <xsd:element ref="quartz:job-group"/>
          </xsd:sequence>
          <xsd:sequence  minOccurs="0">
            <xsd:sequence minOccurs="0">
              <xsd:element ref="quartz:start-time"/>
              <xsd:element ref="quartz:end-time"/>
            </xsd:sequence>
            <xsd:element name="cron-expression" type="quartz:cron-expressionType"/>
            <xsd:element minOccurs="0" ref="quartz:time-zone"/>
          </xsd:sequence>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:simpleType name="cron-expressionType">
    <xsd:annotation>
      <xsd:documentation>
        Cron expression (see JavaDoc for examples)

        Special thanks to Chris Thatcher (thatcher@butterfly.net) for the regular expression!
        
                  Regular expressions are not my strong point but I believe this is complete,
                  with the caveat that order for expressions like 3-0 is not legal but will pass, 
                  and month and day names must be capitalized.
                  If you want to examine the correctness look for the [\s] to denote the
                  seperation of individual regular expressions. This is how I break them up visually 
                  to examine them:
                  
                SECONDS:
                (   
                      ((([0-9] | [0-5][0-9]),)*([0-9]|[0-5][0-9]))
                    | (([0-9]|[0-5][0-9])(/|-)([0-9]|[0-5][0-9]))
                    | ([\?])
                    | ([\*])
                ) [\s]
                MINUTES:
                (   
                      ((([0-9] | [0-5][0-9]),)*([0-9]|[0-5][0-9]))
                    | (([0-9]|[0-5][0-9])(/|-)([0-9]|[0-5][0-9]))
                    | ([\?])
                    | ([\*])
                ) [\s]
                HOURS:
                (
                    ((([0-9]|[0-1][0-9]|[2][0-3]),)*([0-9]|[0-1][0-9]|[2][0-3]))
                  | (([0-9]|[0-1][0-9]|[2][0-3])(/|-)([0-9]|[0-1][0-9]|[2][0-3])) 
                  | ([\?])
                  | ([\*]) 
                ) [\s]
                DAY OF MONTH:
                (
                    ((([1-9]|[0][1-9]|[1-2][0-9]|[3][0-1]),)*([1-9]|[0][1-9]|[1-2][0-9]|[3][0-1])(C)?)
                  | (([1-9]|[0][1-9]|[1-2][0-9]|[3][0-1])(/|-)([1-9]|[0][1-9]|[1-2][0-9]|[3][0-1])(C)?)
                  | (L)
                  | ([\?])
                  | ([\*])
                )[\s]
                MONTH:
                (  
                    ((([1-9]|0[1-9]|1[0-2]),)*([1-9]|0[1-9]|1[0-2]))
                  | (([1-9]|0[1-9]|1[0-2])(/|-)([1-9]|0[1-9]|1[0-2]))
                  | (((JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC),)*(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))
                  | ((JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(-|/)(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))
                  | ([\?])
                  | ([\*])
                )[\s]
                DAY OF WEEK:
                ( 
                    (([1-7],)*([1-7]))
                  | ([1-7](/|-)([1-7]))
                  | (((MON|TUE|WEN|THU|FRI|SAT|SUN),)*(MON|TUE|WEN|THU|FRI|SAT|SUN)(C)?)
                  | ((MON|TUE|WEN|THU|FRI|SAT|SUN)(-|/)(MON|TUE|WEN|THU|FRI|SAT|SUN)(C)?)
                  | (([1-7]|(MON|TUE|WEN|THU|FRI|SAT|SUN))?(L)?)
                  | ([1-7]#([1-7])?)
                  | ([\?])
                  | ([\*])
                )
                YEAR (OPTIONAL):
                ([\s]19[7-9][0-9]|20[0-9]{2})?         
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="(((([0-9]|[0-5][0-9]),)*([0-9]|[0-5][0-9]))|(([0-9]|[0-5][0-9])(/|-)([0-9]|[0-5][0-9]))|([\?])|([\*]))[\s](((([0-9]|[0-5][0-9]),)*([0-9]|[0-5][0-9]))|(([0-9]|[0-5][0-9])(/|-)([0-9]|[0-5][0-9]))|([\?])|([\*]))[\s](((([0-9]|[0-1][0-9]|[2][0-3]),)*([0-9]|[0-1][0-9]|[2][0-3]))|(([0-9]|[0-1][0-9]|[2][0-3])(/|-)([0-9]|[0-1][0-9]|[2][0-3]))|([\?])|([\*]))[\s](((([1-9]|[0][1-9]|[1-2][0-9]|[3][0-1]),)*([1-9]|[0][1-9]|[1-2][0-9]|[3][0-1])(C)?)|(([1-9]|[0][1-9]|[1-2][0-9]|[3][0-1])(/|-)([1-9]|[0][1-9]|[1-2][0-9]|[3][0-1])(C)?)|(L)|([\?])|([\*]))[\s](((([1-9]|0[1-9]|1[0-2]),)*([1-9]|0[1-9]|1[0-2]))|(([1-9]|0[1-9]|1[0-2])(/|-)([1-9]|0[1-9]|1[0-2]))|(((JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC),)*(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))|((JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(-|/)(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC))|([\?])|([\*]))[\s]((([1-7],)*([1-7]))|([1-7](/|-)([1-7]))|(((MON|TUE|WEN|THU|FRI|SAT|SUN),)*(MON|TUE|WEN|THU|FRI|SAT|SUN)(C)?)|((MON|TUE|WEN|THU|FRI|SAT|SUN)(-|/)(MON|TUE|WEN|THU|FRI|SAT|SUN)(C)?)|(([1-7]|(MON|TUE|WEN|THU|FRI|SAT|SUN))?(L)?)|([1-7]#([1-7])?)|([\?])|([\*]))([\s]19[7-9][0-9]|20[0-9]{2})?"/>
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:element name="time-zone" type="xsd:string">
    <xsd:annotation>
      <xsd:documentation>Valid java.util.Timezone ID</xsd:documentation>
    </xsd:annotation>
  </xsd:element>
</xsd:schema>
